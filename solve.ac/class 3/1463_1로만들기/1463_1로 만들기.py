'''
//2에 가능한 계산 방법은 -1 또는 /2 뿐이다. 횟수를 비교해서 더 작은 값을 널는다.
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]  //sumNum[i - 1] + 1
[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0] //[i=2] min(sumNum[2]=1, sumNum[2 // 2] + 1 =1) => 1
-----
//3에 가능한 계산 방법은 -1 또는 /3 뿐이다. 횟수를 비교해서 더 작은 값을 널는다.
[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0] //sumNum[i - 1] + 1
[0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0] //[i=3] min(sumNum[3]=2, sumNum[3 // 3] + 1 =1) => 1
-----
[0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 1, 1, 2, 0, 0, 0, 0, 0, 0] //sumNum[i - 1] + 1
[0, 0, 1, 1, 2, 0, 0, 0, 0, 0, 0] //[i=4] min(sumNum[4]=2, sumNum[4 // 2] + 1 =2) => 2
-----
[0, 0, 1, 1, 2, 0, 0, 0, 0, 0, 0]
[0, 0, 1, 1, 2, 3, 0, 0, 0, 0, 0] //sumNum[i - 1] + 1
[0, 0, 1, 1, 2, 3, 0, 0, 0, 0, 0] //[i=5] sumNum[5]=3
-----
[0, 0, 1, 1, 2, 3, 0, 0, 0, 0, 0]
[0, 0, 1, 1, 2, 3, 4, 0, 0, 0, 0] //sumNum[i - 1] + 1
[0, 0, 1, 1, 2, 3, 2, 0, 0, 0, 0] //[i=6] min(sumNum[6]=4, sumNum[6 // 3] + 1 =2) =>2
-----
[0, 0, 1, 1, 2, 3, 2, 0, 0, 0, 0]
[0, 0, 1, 1, 2, 3, 2, 3, 0, 0, 0] //sumNum[i - 1] + 1
[0, 0, 1, 1, 2, 3, 2, 3, 0, 0, 0] //[i=7] sumNum[7]=3
-----
[0, 0, 1, 1, 2, 3, 2, 3, 0, 0, 0]
[0, 0, 1, 1, 2, 3, 2, 3, 4, 0, 0] //sumNum[i - 1] + 1
[0, 0, 1, 1, 2, 3, 2, 3, 3, 0, 0] //[i=8] min(sumNum[8]=4, sumNum[8 // 2] + 1 =3) =>3
-----
[0, 0, 1, 1, 2, 3, 2, 3, 3, 0, 0]
[0, 0, 1, 1, 2, 3, 2, 3, 3, 4, 0] //sumNum[i - 1] + 1
[0, 0, 1, 1, 2, 3, 2, 3, 3, 2, 0] //[i=9] min(sumNum[9]=4, sumNum[9 // 3] + 1 =2) =>2
-----
[0, 0, 1, 1, 2, 3, 2, 3, 3, 2, 0]
[0, 0, 1, 1, 2, 3, 2, 3, 3, 2, 3] //sumNum[i - 1] + 1
[0, 0, 1, 1, 2, 3, 2, 3, 3, 2, 3] //[i=10] min( sumNum[10]=3, sumNum[10 // 2] + 1 =4) =>3
3
'''

Num = int(input())
sumNum = [0] * (Num + 1)

for i in range(2, Num + 1):

    #제일 작은 수 부터 미리 계산된 값을 저장해두고 필요할 때 빼낼 수 있도록 한다.

    sumNum[i] = sumNum[i - 1] + 1

    if i % 3 == 0:
        sumNum[i] = min(sumNum[i], sumNum[i // 3] + 1)
    if i % 2 == 0:
        sumNum[i] = min(sumNum[i], sumNum[i // 2] + 1)



print(sumNum[Num])
